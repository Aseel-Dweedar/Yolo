/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package leetcode;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;

public class App {

    public static void main(String[] args) {
        int[] arr1 = {4,5,6,7,0,2,1,3};
        int[] arr2 = {0,1,2};
//        System.out.println(restoreString("codeleet",arr1 ));
//        System.out.println(restoreString("abc",arr2 ));
//        System.out.println(Arrays.toString(twoSum(arr2 , 1)));
//        System.out.println(Arrays.toString(twoSum(arr1 , 8)));
        int[] arr3 = {1,3};
        int[] arr4 = {2};
        int[] arr5 = {1,2};
        int[] arr6 = {3,4};
//        System.out.println(findMedianSortedArrays(arr3,arr4));
//        System.out.println(findMedianSortedArrays(arr5,arr6));
        int[] arr7 = {1,1,2};
        int[] arr8 = {0,0,1,1,1,2,2,3,3,4};
//        System.out.println(removeDuplicates(arr7));
//        System.out.println(removeDuplicates(arr8));
        int[] arr9 = {3,2,2,3};
        int[] arr10 = {0,1,2,2,3,0,4,2};
//        System.out.println(removeElement(arr9,3));
//        System.out.println(removeElement(arr10,2));
        int[] arr11 = {4,5,6,7,0,1,2};
        int[] arr12 = {4,5,6,7,0,1,2};
        int[] arr13 = {1};
//        System.out.println(search(arr11, 0));
//        System.out.println(search(arr12, 3));
//        System.out.println(search(arr13, 0));
        int[] arr14 = {1,2,4,7,9,10,13};
//        System.out.println(searchInsert(arr14, 8));
        int[] arr15 = {9,9,9,9,9,9};
        int[] arr16 = {1,2,9,9};
//        System.out.println(Arrays.toString(plusOne(arr15)));
//        System.out.println(Arrays.toString(plusOne(arr16)));
        int[] arr17 = {1,2,3,0,0,0};
        int[] arr18 = {2,5,6};
        int[] arr19 = {2,0};
        int[] arr20 = {1};
//        merge(arr17,3,arr18,3);
//        merge(arr19,1,arr20,1);
//        System.out.println(generate(5).toString());

        ListNode l3 = new ListNode(3);
        ListNode l2 = new ListNode(2,l3);
        ListNode l1 = new ListNode(1,l2);

        addTwoNumbers(l1,l1);

    }

    public static ListNode addTwoNumbers(ListNode l1, ListNode l2) {

        int carryOver = 0;
        ListNode temp = l1;

        while (l1 != null || l2 != null) {
            int sum = l1.val + l2.val + carryOver;
            l1.val = ;
            if (sum > 9 &&  ) {

            }

//            System.out.println(l1.val);
//            System.out.println();
//            System.out.println(l2.val);
            l1 = l1.next;
            l2 = l2.next;
        }

        while (temp != null) {
            System.out.println(temp.val);
            temp = temp.next;
        }

        return temp;
    }


    public static String restoreString (String s, int[] indices) {
        char[] arr = new char[indices.length];
        for (int i = 0; i < indices.length; i++) {
            arr[indices[i] ] = s.charAt(i);
        }
        return new String(arr);
    }

    public static int[] twoSum(int[] nums, int target) {
        int[] arr = new int[2];
//        for (int i = 0; i <= nums.length; i++) {
//            for (int j = i+1; j < nums.length; j++) {
//                if (nums[i] + nums[j] == target){
//                    arr[0] = i;
//                    arr[1] = j;
//                    return arr;
//                }
//            }
//        }
        HashMap<Integer,Integer> map = new HashMap<>();
        for (int i = 0; i < nums.length; i++) {
            if (!map.containsKey(target-nums[i])) {
                map.put(nums[i] , i);
            } else {
                arr[0] = map.get(target-nums[i]);
                    arr[1] = i;
            }
        }
        return arr;
    }

    public static double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int[] arr = new int[nums1.length+nums2.length];
        int index1 = 0 ;
        int index2 = 0 ;
        for (int i = 0; i < nums1.length+nums2.length; i++) {
            if (index1 >= nums1.length ) {
                arr[i] = nums2[index2];
                index2++;
            } else if (index2 >= nums2.length) {
                arr[i] = nums1[index1];
                index1 ++;
            } else {
                if (nums1[index1] < nums2[index2]) {
                    arr[i] = nums1[index1];
                    index1 ++;
                } else {
                    arr[i] = nums2[index2];
                    index2++;
                }
            }
        }
        if (arr.length % 2 == 0 ) {
            double midPoint = (float) (arr[arr.length/2] + arr[arr.length/2 -1])/2;
            return midPoint;
        } else {
            return  (arr[(int) Math.floor(arr.length/2)]);
        }
    }

    public static int minMovesToSeat(int[] seats, int[] students) {
        Arrays.sort(seats);
        Arrays.sort(students);
        int sum = 0;
        for (int i = 0; i < seats.length; i++) {
            sum += Math.abs(students[i] - seats[i]);
        }
        return sum;
    }

    public static int removeDuplicates(int[] nums) {
        int idx = 1 ;
        for (int i = 1; i < nums.length; i++) {

            if (nums[i] != nums[i-1]){
                nums[idx] = nums[i];
                idx++;
            }
        }
        return idx;
    }

    public static int removeElement(int[] nums, int val) {
        int idx = 0 ;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] != val){
                nums[idx] = nums[i];
                idx++;
            }
        }
        return idx;
    }

    public static int search(int[] nums, int target) {
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] == target) {
                return i;
            }
            if ( i+1 != nums.length) {
                if (nums[i + 1] < nums[i] && (nums[i] < target || nums[nums.length - 1] < target || target < nums[i + 1])) {
                    return -1;
                }
            }

        }
        return -1;
    }

    public static int searchInsert(int[] nums, int target) {
        if (target < nums[0]) {
            return 0;
        }
        if (target > nums[nums.length - 1]) {
            return nums.length;
        }
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] == target || nums[i] > target) {
                return i;
            }
        }
        return -1;
    }

    public static int[] plusOne(int[] digits) {
        if (digits[digits.length - 1] < 9) {
            digits[digits.length - 1] = digits[digits.length - 1] + 1;
        } else {
            for (int i = digits.length - 1; i >= 0; i--) {
                if (digits[i] == 9) {
                    digits[i] = 0;
                } else {
                    digits[i] = digits[i] + 1;
                    break;
                }
                if (i == 0) {
                    int[] newArr = new int[digits.length+1];
                    newArr[0] = 1;
                    for (int j = 1; j < newArr.length; j++) {
                        newArr[j] = 0;
                    }
                    return newArr;
                }
            }
        }
        return digits;
    }
//    merge(arr19,1,arr20,1); // {2,0} // {1}
    public static void merge(int[] nums1, int m, int[] nums2, int n) {
        if (nums2.length == 0) return;
        if (nums1.length == n) {
            System.arraycopy(nums2, 0, nums1, 0, nums1.length);
        } else {
            int idx2 = 0;
            for (int i = 0; i < nums1.length; i++) {
                if (idx2 == nums2.length) break;
                if (nums1[i] == 0 && i >= m + idx2) {
                    nums1[i] = nums2[idx2];
                    idx2++;
                } else if (nums2[idx2] < nums1[i]) {
                    for (int j = m + idx2; j > i; j--) {
                        nums1[j] = nums1[j - 1];
                    }
                    nums1[i] = nums2[idx2];
                    idx2++;
                }
            }
        }
        System.out.println(Arrays.toString(nums1));
    }

    public static List<List<Integer>> generate(int numRows) {
        List<List<Integer>> list = new ArrayList<List<Integer>>();
        List<Integer> innerList = new ArrayList<>();
        innerList.add(1);
        list.add(innerList);
        for (int i = 1; i < numRows; i++) {
            List<Integer> newInnerList = new ArrayList<>();
            newInnerList.add(1);
            for (int j = 1; j <= i; j++) {
                if (j == i) {
                    newInnerList.add(1);
                } else {
                    Integer x = list.get(i - 1).get(j-1) + list.get(i - 1).get(j);
                    newInnerList.add(x);
                }
            }
            list.add(newInnerList);
        }
        return list;
    }
}
